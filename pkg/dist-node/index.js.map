{"version":3,"file":"index.js","sources":["../dist-src/utils.js","../dist-src/transform/schema.js","../dist-src/transform/headers.js","../dist-src/transform/parameters.js","../dist-src/transform/responses.js","../dist-src/transform/operation.js","../dist-src/transform/paths.js","../dist-src/transform/index.js","../dist-src/index.js"],"sourcesContent":["export function comment(text) {\n    const commentText = text.trim();\n    if (commentText.indexOf(\"\\n\") === -1) {\n        return `/** ${commentText} */\\n`;\n    }\n    return `/**\n  * ${commentText.replace(/\\r?\\n/g, \"\\n  * \")}\n  */\\n`;\n}\nexport function fromEntries(entries) {\n    return entries.reduce((obj, [key, val]) => ({ ...obj, [key]: val }), {});\n}\nexport function isRef(obj) {\n    return !!obj.$ref;\n}\nexport function nodeType(obj) {\n    if (!obj || typeof obj !== \"object\") {\n        return undefined;\n    }\n    if (obj.$ref) {\n        return \"ref\";\n    }\n    if (Array.isArray(obj.enum)) {\n        return \"enum\";\n    }\n    if (obj.type === \"boolean\") {\n        return \"boolean\";\n    }\n    if ([\"binary\", \"byte\", \"date\", \"dateTime\", \"password\", \"string\"].includes(obj.type)) {\n        return \"string\";\n    }\n    if ([\"double\", \"float\", \"integer\", \"number\"].includes(obj.type)) {\n        return \"number\";\n    }\n    if (Array.isArray(obj.anyOf)) {\n        return \"anyOf\";\n    }\n    if (Array.isArray(obj.oneOf)) {\n        return \"oneOf\";\n    }\n    if (obj.type === \"array\" || obj.items) {\n        return \"array\";\n    }\n    return \"object\";\n}\nexport function swaggerVersion(definition) {\n    const { openapi } = definition;\n    if (openapi && parseInt(openapi, 10) === 3) {\n        return 3;\n    }\n    const { swagger } = definition;\n    if (swagger && parseInt(swagger, 10) === 2) {\n        return 2;\n    }\n    throw new Error(`üöè version missing from schema; specify whether this is OpenAPI v3 or v2 https://swagger.io/specification`);\n}\nexport function transformRef(ref, root = \"\") {\n    const isExternalRef = !ref.startsWith(\"#\");\n    if (isExternalRef)\n        return \"any\";\n    const parts = ref.replace(/^#\\//, root).split(\"/\");\n    return `${parts[0]}[\"${parts.slice(1).join('\"][\"')}\"]`;\n}\nexport function tsArrayOf(type) {\n    return `(${type})[]`;\n}\nexport function tsTupleOf(types) {\n    return `[${types.join(\", \")}]`;\n}\nexport function tsIntersectionOf(types) {\n    if (types.length === 1)\n        return types[0];\n    return `(${types.join(\") & (\")})`;\n}\nexport function tsPartial(type) {\n    return `Partial<${type}>`;\n}\nexport function tsUnionOf(types) {\n    if (types.length === 1)\n        return types[0];\n    return `(${types.join(\") | (\")})`;\n}\nexport function unrefComponent(components, ref) {\n    const [type, object] = ref.match(/(?<=\\[\")([^\"]+)/g);\n    return components[type][object];\n}\n","import { comment, nodeType, transformRef, tsArrayOf, tsIntersectionOf, tsPartial, tsTupleOf, tsUnionOf, } from \"../utils\";\nexport function transformSchemaObjMap(obj, options) {\n    let output = \"\";\n    let required = (options && options.required) || [];\n    Object.entries(obj).forEach(([key, value]) => {\n        if (value.description)\n            output += comment(value.description);\n        output += `\"${key}\"${required.includes(key) ? \"\" : \"?\"}: `;\n        output += transformSchemaObj(value.schema || value);\n        output += `;\\n`;\n    });\n    return output.replace(/\\n+$/, \"\\n\");\n}\nexport function transformAnyOf(anyOf) {\n    return tsIntersectionOf(anyOf.map((s) => tsPartial(transformSchemaObj(s))));\n}\nexport function transformOneOf(oneOf) {\n    return tsUnionOf(oneOf.map(transformSchemaObj));\n}\nexport function transformSchemaObj(node) {\n    let output = \"\";\n    if (node.nullable) {\n        output += \"(\";\n    }\n    switch (nodeType(node)) {\n        case \"ref\": {\n            output += transformRef(node.$ref);\n            break;\n        }\n        case \"string\":\n        case \"number\":\n        case \"boolean\": {\n            output += nodeType(node) || \"any\";\n            break;\n        }\n        case \"enum\": {\n            output += tsUnionOf(node.enum.map((item) => (typeof item === \"string\" ? `'${item.replace(/'/g, \"\\\\'\")}'` : item)));\n            break;\n        }\n        case \"object\": {\n            if ((!node.properties || !Object.keys(node.properties).length) && !node.allOf && !node.additionalProperties) {\n                output += `{ [key: string]: any }`;\n                break;\n            }\n            let properties = transformSchemaObjMap(node.properties || {}, { required: node.required });\n            let additionalProperties;\n            if (node.additionalProperties) {\n                if (node.additionalProperties === true) {\n                    additionalProperties = `{ [key: string]: any }`;\n                }\n                else if (typeof node.additionalProperties === \"object\") {\n                    const oneOf = node.additionalProperties.oneOf || undefined;\n                    const anyOf = node.additionalProperties.anyOf || undefined;\n                    if (oneOf) {\n                        additionalProperties = `{ [key: string]: ${transformOneOf(oneOf)}; }`;\n                    }\n                    else if (anyOf) {\n                        additionalProperties = `{ [key: string]: ${transformAnyOf(anyOf)}; }`;\n                    }\n                    else {\n                        additionalProperties = `{ [key: string]: ${transformSchemaObj(node.additionalProperties) || \"any\"}; }`;\n                    }\n                }\n            }\n            output += tsIntersectionOf([\n                ...(node.allOf ? node.allOf.map(transformSchemaObj) : []),\n                ...(properties ? [`{\\n${properties}\\n}`] : []),\n                ...(additionalProperties ? [additionalProperties] : []),\n            ]);\n            break;\n        }\n        case \"array\": {\n            if (Array.isArray(node.items)) {\n                output += tsTupleOf(node.items.map(transformSchemaObj));\n            }\n            else {\n                output += tsArrayOf(node.items ? transformSchemaObj(node.items) : \"any\");\n            }\n            break;\n        }\n        case \"anyOf\": {\n            output += transformAnyOf(node.anyOf);\n            break;\n        }\n        case \"oneOf\": {\n            output += transformOneOf(node.oneOf);\n            break;\n        }\n    }\n    if (node.nullable) {\n        output += \") | null\";\n    }\n    return output;\n}\n","import { comment } from \"../utils\";\nimport { transformSchemaObj } from \"./schema\";\nexport function transformHeaderObjMap(headerMap) {\n    let output = \"\";\n    Object.entries(headerMap).forEach(([k, v]) => {\n        if (!v.schema)\n            return;\n        if (v.description)\n            output += comment(v.description);\n        const required = v.required ? \"\" : \"?\";\n        output += `  \"${k}\"${required}: ${transformSchemaObj(v.schema)}\\n`;\n    });\n    return output;\n}\n","import { transformSchemaObj } from \"./schema\";\nimport { comment } from \"../utils\";\nexport function transformParametersArray(parameters, globalParams) {\n    let output = \"\";\n    let mappedParams = {};\n    parameters.forEach((paramObj) => {\n        if (paramObj.$ref && globalParams) {\n            const paramName = paramObj.$ref.split(\"/\").pop();\n            if (globalParams[paramName]) {\n                const reference = globalParams[paramName];\n                if (!mappedParams[reference.in])\n                    mappedParams[reference.in] = {};\n                mappedParams[reference.in][reference.name || paramName] = {\n                    ...reference,\n                    schema: { $ref: paramObj.$ref },\n                };\n            }\n            return;\n        }\n        if (!paramObj.in || !paramObj.name)\n            return;\n        if (!mappedParams[paramObj.in])\n            mappedParams[paramObj.in] = {};\n        mappedParams[paramObj.in][paramObj.name] = paramObj;\n    });\n    Object.entries(mappedParams).forEach(([paramIn, paramGroup]) => {\n        output += `  ${paramIn}: {\\n`;\n        Object.entries(paramGroup).forEach(([paramName, paramObj]) => {\n            let paramComment = \"\";\n            if (paramObj.deprecated)\n                paramComment += `@deprecated `;\n            if (paramObj.description)\n                paramComment += paramObj.description;\n            if (paramComment)\n                output += comment(paramComment);\n            const required = paramObj.required ? `` : `?`;\n            output += `    \"${paramName}\"${required}: ${paramObj.schema ? transformSchemaObj(paramObj.schema) : \"unknown\"};\\n`;\n        });\n        output += `  }\\n`;\n    });\n    return output;\n}\n","import { comment, transformRef } from \"../utils\";\nimport { transformHeaderObjMap } from \"./headers\";\nimport { transformSchemaObj } from \"./schema\";\nconst resType = (res) => (res === 204 || (res >= 300 && res < 400) ? \"never\" : \"unknown\");\nexport function transformResponsesObj(responsesObj) {\n    let output = \"\";\n    Object.entries(responsesObj).forEach(([httpStatusCode, response]) => {\n        if (response.description)\n            output += comment(response.description);\n        const statusCode = Number(httpStatusCode) || `\"${httpStatusCode}\"`;\n        if (response.$ref) {\n            output += `  ${statusCode}: ${transformRef(response.$ref)};\\n`;\n            return;\n        }\n        if ((!response.content && !response.schema) || (response.content && !Object.keys(response.content).length)) {\n            output += `  ${statusCode}: ${resType(statusCode)};\\n`;\n            return;\n        }\n        output += `  ${statusCode}: {\\n`;\n        if (response.headers && Object.keys(response.headers).length) {\n            if (response.headers.$ref) {\n                output += `    headers: ${transformRef(response.headers.$ref)};\\n`;\n            }\n            else {\n                output += `    headers: {\\n      ${transformHeaderObjMap(response.headers)}\\n    }\\n`;\n            }\n        }\n        if (response.content && Object.keys(response.content).length) {\n            output += `    content: {\\n`;\n            Object.entries(response.content).forEach(([contentType, contentResponse]) => {\n                output += `      \"${contentType}\": ${transformSchemaObj(contentResponse.schema)};\\n`;\n            });\n            output += `    }\\n`;\n        }\n        else if (response.schema) {\n            output += `  schema: ${transformSchemaObj(response.schema)};\\n`;\n        }\n        output += `  }\\n`;\n    });\n    return output;\n}\n","import { comment, isRef, transformRef } from \"../utils\";\nimport { transformParametersArray } from \"./parameters\";\nimport { transformResponsesObj } from \"./responses\";\nimport { transformSchemaObj } from \"./schema\";\nexport function transformOperationObj(operation, globalParams) {\n    let output = \"\";\n    if (operation.parameters) {\n        output += `  parameters: {\\n    ${transformParametersArray(operation.parameters, globalParams)}\\n  }\\n`;\n    }\n    if (operation.responses) {\n        output += `  responses: {\\n  ${transformResponsesObj(operation.responses)}\\n  }\\n`;\n    }\n    if (operation.requestBody) {\n        if (isRef(operation.requestBody)) {\n            output += `  requestBody: ${transformRef(operation.requestBody.$ref)};\\n`;\n        }\n        else {\n            const { description, content } = operation.requestBody;\n            if (description)\n                output += comment(description);\n            if (content && Object.keys(content).length) {\n                output += `  requestBody: {\\n    content: {\\n`;\n                Object.entries(content).forEach(([k, v]) => {\n                    output += `      \"${k}\": ${transformSchemaObj(v.schema)};\\n`;\n                });\n                output += `    }\\n  }\\n`;\n            }\n            else {\n                output += `  requestBody: unknown;\\n`;\n            }\n        }\n    }\n    return output;\n}\n","import { comment, transformRef } from \"../utils\";\nimport { transformOperationObj } from \"./operation\";\nimport { transformParametersArray } from \"./parameters\";\nexport function transformPathsObj(paths, { operations, parameters }) {\n    let output = \"\";\n    Object.entries(paths).forEach(([url, pathItem]) => {\n        if (pathItem.description)\n            output += comment(pathItem.description);\n        if (pathItem.$ref) {\n            output += `  \"${url}\": ${transformRef(pathItem.$ref)};\\n`;\n            return;\n        }\n        output += `  \"${url}\": {\\n`;\n        [\"get\", \"put\", \"post\", \"delete\", \"options\", \"head\", \"patch\", \"trace\"].forEach((method) => {\n            const operation = pathItem[method];\n            if (!operation)\n                return;\n            if (operation.description)\n                output += comment(operation.description);\n            if (operation.operationId) {\n                output += `    \"${method}\": operations[\"${operation.operationId}\"];\\n`;\n                operations[operation.operationId] = operation;\n                return;\n            }\n            output += `    \"${method}\": {\\n      ${transformOperationObj(operation, parameters)}\\n    }\\n`;\n        });\n        if (pathItem.parameters) {\n            output += `    parameters: {\\n      ${transformParametersArray(pathItem.parameters, parameters)}\\n    }\\n`;\n        }\n        output += `  }\\n`;\n    });\n    return output;\n}\n","import { comment } from \"../utils\";\nimport { transformHeaderObjMap } from \"./headers\";\nimport { transformOperationObj } from \"./operation\";\nimport { transformPathsObj } from \"./paths\";\nimport { transformResponsesObj } from \"./responses\";\nimport { transformSchemaObjMap } from \"./schema\";\nexport function transformAll(schema, { version, rawSchema }) {\n    let output = \"\";\n    let operations = {};\n    if (rawSchema) {\n        switch (version) {\n            case 2: {\n                return `export interface definitions {\\n  ${transformSchemaObjMap(schema, {\n                    required: Object.keys(schema),\n                })}\\n}`;\n            }\n            case 3: {\n                return `export interface schemas {\\n    ${transformSchemaObjMap(schema, {\n                    required: Object.keys(schema),\n                })}\\n  }\\n\\n`;\n            }\n        }\n    }\n    output += `export interface paths {\\n`;\n    if (schema.paths) {\n        output += transformPathsObj(schema.paths, {\n            operations,\n            parameters: (schema.components && schema.components.parameters) || schema.parameters,\n        });\n    }\n    output += `}\\n\\n`;\n    switch (version) {\n        case 2: {\n            output += `export interface definitions {\\n  ${transformSchemaObjMap(schema.definitions || {}, {\n                required: Object.keys(schema.definitions),\n            })}\\n}\\n\\n`;\n            if (schema.parameters) {\n                const required = Object.keys(schema.parameters);\n                output += `export interface parameters {\\n    ${transformSchemaObjMap(schema.parameters, {\n                    required,\n                })}\\n  }\\n\\n`;\n            }\n            if (schema.responses) {\n                output += `export interface responses {\\n    ${transformResponsesObj(schema.responses)}\\n  }\\n\\n`;\n            }\n            break;\n        }\n        case 3: {\n            output += `export interface components {\\n`;\n            if (schema.components) {\n                if (schema.components.schemas) {\n                    const required = Object.keys(schema.components.schemas);\n                    output += `  schemas: {\\n    ${transformSchemaObjMap(schema.components.schemas, { required })}\\n  }\\n`;\n                }\n                if (schema.components.responses) {\n                    output += `  responses: {\\n    ${transformResponsesObj(schema.components.responses)}\\n  }\\n`;\n                }\n                if (schema.components.parameters) {\n                    const required = Object.keys(schema.components.parameters);\n                    output += `  parameters: {\\n    ${transformSchemaObjMap(schema.components.parameters, {\n                        required,\n                    })}\\n  }\\n`;\n                }\n                if (schema.components.requestBodies) {\n                    const required = Object.keys(schema.components.requestBodies);\n                    output += `  requestBodies: {\\n    ${transformSchemaObjMap(schema.components.requestBodies, {\n                        required,\n                    })}\\n  }\\n`;\n                }\n                if (schema.components.headers) {\n                    output += `  headers: {\\n    ${transformHeaderObjMap(schema.components.headers)}  }\\n`;\n                }\n            }\n            output += `}\\n\\n`;\n            break;\n        }\n    }\n    output += `export interface operations {\\n`;\n    if (Object.keys(operations).length) {\n        Object.entries(operations).forEach(([operationId, operation]) => {\n            if (operation.description)\n                output += comment(operation.description);\n            output += `  \"${operationId}\": {\\n    ${transformOperationObj(operation, (schema.components && schema.components.parameters) || schema.parameters || [])};\\n  }\\n`;\n        });\n    }\n    output += `}\\n`;\n    return output.trim();\n}\n","import path from \"path\";\nimport prettier from \"prettier\";\nimport { swaggerVersion } from \"./utils\";\nimport { transformAll } from \"./transform/index\";\nexport * from \"./types/index\";\nexport const WARNING_MESSAGE = `/**\n* This file was auto-generated by openapi-typescript.\n* Do not make direct changes to the file.\n*/\n\n\n`;\nexport default function swaggerToTS(schema, options) {\n    const version = (options && options.version) || swaggerVersion(schema);\n    let output = `${WARNING_MESSAGE}\n  ${transformAll(schema, { version, rawSchema: options && options.rawSchema })}\n`;\n    let prettierOptions = { parser: \"typescript\" };\n    if (options && options.prettierConfig) {\n        try {\n            const userOptions = prettier.resolveConfig.sync(path.resolve(process.cwd(), options.prettierConfig));\n            prettierOptions = {\n                ...prettierOptions,\n                ...userOptions,\n            };\n        }\n        catch (err) {\n            console.error(`‚ùå ${err}`);\n        }\n    }\n    return prettier.format(output, prettierOptions);\n}\n"],"names":["comment","text","commentText","trim","indexOf","replace","isRef","obj","$ref","nodeType","undefined","Array","isArray","enum","type","includes","anyOf","oneOf","items","swaggerVersion","definition","openapi","parseInt","swagger","Error","transformRef","ref","root","isExternalRef","startsWith","parts","split","slice","join","tsArrayOf","tsTupleOf","types","tsIntersectionOf","length","tsPartial","tsUnionOf","transformSchemaObjMap","options","output","required","Object","entries","forEach","key","value","description","transformSchemaObj","schema","transformAnyOf","map","s","transformOneOf","node","nullable","item","properties","keys","allOf","additionalProperties","transformHeaderObjMap","headerMap","k","v","transformParametersArray","parameters","globalParams","mappedParams","paramObj","paramName","pop","reference","in","name","paramIn","paramGroup","paramComment","deprecated","resType","res","transformResponsesObj","responsesObj","httpStatusCode","response","statusCode","Number","content","headers","contentType","contentResponse","transformOperationObj","operation","responses","requestBody","transformPathsObj","paths","operations","url","pathItem","method","operationId","transformAll","version","rawSchema","components","definitions","schemas","requestBodies","WARNING_MESSAGE","swaggerToTS","prettierOptions","parser","prettierConfig","userOptions","prettier","resolveConfig","sync","path","resolve","process","cwd","err","console","error","format"],"mappings":"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"}